# ============================================================
# Fichier : export.py
# Objectif : Export des donn√©es avec s√©lection de colonnes,
# choix du format, logs, snapshot et t√©l√©chargement
# ============================================================

import streamlit as st
import pandas as pd
import os

from utils.snapshot_utils import save_snapshot
from utils.log_utils import log_action
from utils.ui_utils import show_header_image

def run_export(df: pd.DataFrame):
    # üé¥ Image d√©corative
    show_header_image("bg_export_peace.png")

    st.title("üíæ Export du fichier final")

    if df is None or df.empty:
        st.warning("‚ùå Aucune donn√©e disponible pour l‚Äôexport.")
        return

    # Aper√ßu global
    st.markdown(f"üîé **Fichier actif : `{st.session_state.get('global_df_selector', 'dataframe')}`**")
    st.markdown(f"**{df.shape[0]} lignes √ó {df.shape[1]} colonnes**")

    # S√©lection des colonnes √† exporter
    st.markdown("### üß© Colonnes √† inclure")
    selected_columns = st.multiselect("S√©lectionnez les colonnes", df.columns.tolist(), default=df.columns.tolist())

    # Choix du format d‚Äôexport
    st.markdown("### üì¶ Format du fichier")
    file_format = st.selectbox("Format", options=["csv", "xlsx", "json", "parquet"], index=0)

    # Nom du fichier
    file_name = st.text_input("Nom du fichier export√©", value=f"export_final.{file_format}")

    # G√©n√©ration du fichier export√©
    if st.button("üì• G√©n√©rer et t√©l√©charger le fichier"):
        try:
            df_export = df[selected_columns]

            # Cr√©ation du r√©pertoire d'exports
            os.makedirs("data/exports", exist_ok=True)
            export_path = os.path.join("data/exports", file_name)

            # Sauvegarde dans le format choisi
            if file_format == "csv":
                df_export.to_csv(export_path, index=False)
            elif file_format == "xlsx":
                df_export.to_excel(export_path, index=False)
            elif file_format == "json":
                df_export.to_json(export_path, orient="records")
            elif file_format == "parquet":
                df_export.to_parquet(export_path, index=False)

            # Log et snapshot
            save_snapshot(df_export, suffix="export")
            log_action("export", f"{file_name} - {len(selected_columns)} colonnes - format {file_format}")

            st.success(f"‚úÖ Fichier export√© : {file_name}")
            st.download_button(
                label="üì• T√©l√©charger maintenant",
                data=open(export_path, "rb").read(),
                file_name=file_name,
                mime="text/csv" if file_format == "csv" else None
            )

        except Exception as e:
            st.error(f"‚ùå Erreur pendant l‚Äôexport : {e}")
