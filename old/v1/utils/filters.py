# ============================================================
# Fichier : filters.py
# Objectif : Fonctions utilitaires pour Datalyzer
# S√©lection de fichier actif, filtrage, validation d‚Äô√©tapes
# Version enrichie avec validation des entr√©es et meilleure gestion des erreurs
# ============================================================

import streamlit as st
import pandas as pd
from utils.snapshot_utils import save_snapshot


# ============================================================
# üîÅ S√©lecteur du fichier actif
# ============================================================

def get_active_dataframe() -> tuple[pd.DataFrame, str] | tuple[None, None]:
    """
    Affiche un selectbox pour choisir un fichier parmi ceux import√©s.
    Retourne le DataFrame s√©lectionn√© et son nom.
    """
    dfs = st.session_state.get("dfs", {})
    if not dfs:
        st.warning("‚ö†Ô∏è Aucun fichier import√©. Merci d'en charger un dans l'onglet Chargement.")
        return None, None

    options = list(dfs.keys())
    selected = st.selectbox("üóÇÔ∏è Fichier √† analyser", options, key="global_df_selector")
    df = dfs.get(selected)

    if isinstance(df, pd.DataFrame):
        st.session_state.df = df  # Mise √† jour du fichier actif global
        return df, selected
    else:
        return None, None


# ============================================================
# üßπ Validation d‚Äô√©tape avec bouton et nom de snapshot
# ============================================================

def mark_step_done(step: str, custom_name: str = None):
    """
    Marque une √©tape comme valid√©e dans la session Streamlit
    et sauvegarde un snapshot nomm√©.
    
    Args:
        step (str): Le nom de l'√©tape √† valider.
        custom_name (str): Le nom personnalis√© du snapshot (facultatif).
    """
    st.session_state.setdefault("validation_steps", {})
    if step in st.session_state["validation_steps"]:
        st.warning(f"‚ö†Ô∏è L'√©tape '{step}' a d√©j√† √©t√© valid√©e.")
        return  # Emp√™che la validation si l'√©tape est d√©j√† valid√©e
    
    st.session_state["validation_steps"][step] = True

    # Validation du nom de snapshot
    if custom_name:
        custom_name = custom_name.strip().replace(" ", "_")  # Remplacer les espaces par des underscores
        if not custom_name.isalnum():
            st.warning("‚ùå Le nom du snapshot contient des caract√®res invalides. Utilisez des lettres et chiffres uniquement.")
            return
    else:
        custom_name = f"{step}_validated"
    
    try:
        save_snapshot(label=custom_name)
        st.success(f"‚úÖ √âtape '{step}' valid√©e. Snapshot sauvegard√©.")
    except Exception as e:
        st.error(f"‚ùå Erreur lors de la sauvegarde du snapshot : {e}")


def validate_step_button(step_name: str, label: str = "‚úÖ Valider l‚Äô√©tape", context_prefix: str = ""):
    """
    Affiche un champ de nom de snapshot (optionnel) + bouton de validation.
    Permet de personnaliser la cl√© pour √©viter les doublons dans la page.
    """
    final_key = f"{context_prefix}name_{step_name}"  # On ajoute un contexte pour rendre unique
    custom = st.text_input(f"Nom du snapshot pour l'√©tape `{step_name}` (optionnel)", key=final_key)

    if st.button(label, key=f"{context_prefix}validate_{step_name}"):
        mark_step_done(step_name, custom_name=custom)


        
# ============================================================
# üìä Filtrage par type (utilis√© dans suggestions ou ciblage)
# ============================================================

def get_columns_by_dtype(df: pd.DataFrame, dtype: str = "number") -> list:
    """
    Retourne la liste des colonnes du DataFrame correspondant √† un type pandas donn√©.
    Exemple : "number", "object", "bool", etc.
    """
    return df.select_dtypes(include=dtype).columns.tolist()


def filter_dataframe_by_column(df: pd.DataFrame, column: str, value):
    """
    Filtre un DataFrame en gardant les lignes o√π column == value.
    """
    return df[df[column] == value]
