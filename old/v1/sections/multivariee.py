# ============================================================
# Fichier : multivariee.py
# Objectif : ACP, clustering, projection, boxplots, Cram√©r‚Äôs V
# Version enrichie avec validation interactive et fonctionnalit√©s avanc√©es
# ============================================================

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score

from config import EDA_STEPS
from utils.snapshot_utils import save_snapshot
from utils.eda_utils import compute_cramers_v_matrix, plot_boxplots
from utils.log_utils import log_action
from utils.filters import get_active_dataframe, validate_step_button
from utils.ui_utils import show_header_image, show_icon_header, show_eda_progress


def run_multivariee():
    # En-t√™te graphique et p√©dagogique
    show_header_image("bg_sakura_river.png")
    show_icon_header("üìä", "Analyse multivari√©e", "ACP, clustering, boxplots et corr√©lations cat√©gorielles")
    show_eda_progress(EDA_STEPS, st.session_state.get("validation_steps", {}))

    # üîÅ Fichier actif
    df, nom = get_active_dataframe()
    if df is None or df.empty:
        st.warning("‚ùå Aucun fichier actif ou le fichier est vide. Merci de s√©lectionner un fichier valide dans l‚Äôonglet Fichiers.")
        return

    # üìà Pr√©paration des donn√©es num√©riques
    numeric_cols = df.select_dtypes(include="number").dropna(axis=1).columns.tolist()
    if len(numeric_cols) < 2:
        st.error("‚ùå Il faut au moins deux variables num√©riques pour faire une ACP.")
        return

    # üéØ Nombre de composantes
    n_max = min(len(numeric_cols), 6)  # Correction de la syntaxe
    n_components = st.slider("üìâ Nombre de composantes ACP", min_value=2, max_value=n_max, value=2)

    # ‚öôÔ∏è ACP : r√©duction de dimensions
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(df[numeric_cols])
    pca = PCA(n_components=n_components)
    X_pca = pca.fit_transform(X_scaled)
    df_pca = pd.DataFrame(X_pca, columns=[f"PC{i+1}" for i in range(n_components)])

    # üìä Variance expliqu√©e
    st.markdown("### üéØ Variance expliqu√©e")
    explained_var = pca.explained_variance_ratio_
    fig_var = px.bar(
        x=[f"PC{i+1}" for i in range(n_components)],
        y=explained_var * 100,
        labels={"x": "Composantes", "y": "% Variance expliqu√©e"},
        title="Variance expliqu√©e par composante"
    )
    st.plotly_chart(fig_var)

    # ü§ñ Clustering KMeans (optionnel)
    st.markdown("### ü§ñ Clustering KMeans (optionnel)")
    if st.checkbox("Activer le clustering post-ACP"):
        n_clusters = st.slider("Nombre de clusters", min_value=2, max_value=10, value=3)
        model = KMeans(n_clusters=n_clusters, n_init=10, random_state=42)
        df_pca["Cluster"] = model.fit_predict(X_pca)
        st.success(f"‚úÖ Clustering KMeans effectu√© avec {n_clusters} clusters.")
        log_action("clustering", f"{n_clusters} clusters sur ACP")

        # Ajouter une √©valuation du score de silhouette
        silhouette_avg = silhouette_score(X_pca, df_pca["Cluster"])
        st.info(f"Score de silhouette pour {n_clusters} clusters : {silhouette_avg:.2f}")

        if st.button("üíæ Sauvegarder les clusters en snapshot"):
            save_snapshot(df_pca, suffix="acp_clusters")
            st.success("‚úÖ Snapshot ACP + Clusters sauvegard√©.")

    # üåê Projection 2D
    st.markdown("### üåê Projection des composantes principales")
    color_options = [None] + df.select_dtypes(include="object").columns.tolist()
    color_by = st.selectbox("üé® Colorier par :", options=color_options, index=0)

    # V√©rification que les composantes sont pr√©sentes avant de tracer
    if "PC1" in df_pca.columns and "PC2" in df_pca.columns:
        fig_proj = px.scatter(
            df_pca,
            x="PC1", y="PC2",
            color=df[color_by] if color_by else df_pca.get("Cluster"),
            title="Projection ACP",
            labels={"PC1": "Composante 1", "PC2": "Composante 2"},
            width=700, height=500
        )
        st.plotly_chart(fig_proj)
    else:
        st.warning("‚ùå Les composantes principales PC1 et PC2 ne sont pas disponibles pour la projection.")

    # üì¶ Boxplots Num√©rique ‚Üî Cat√©gories
    st.markdown("### üßÆ Boxplots Num√©rique ‚Üî Cat√©gories")
    cat_cols = df.select_dtypes(include="object").columns.tolist()
    if numeric_cols and cat_cols:
        col_num = st.selectbox("üî¢ Variable num√©rique", numeric_cols)
        col_cat = st.selectbox("üìÅ Variable cat√©gorielle", cat_cols)
        st.plotly_chart(plot_boxplots(df, col_num, col_cat))
    else:
        st.info("‚ùó Aucune combinaison Num ‚Üî Cat√©gories disponible.")

    # üìà Corr√©lations cat√©gorielles (Cram√©r‚Äôs V)
    st.markdown("### üìà Corr√©lations cat√©gorielles (Cram√©r‚Äôs V)")
    if len(cat_cols) >= 2:
        cramers_df = compute_cramers_v_matrix(df[cat_cols])
        st.dataframe(cramers_df.style.background_gradient(cmap="Blues"))
    else:
        st.info("‚ùó Pas assez de variables cat√©gorielles pour calculer Cram√©r‚Äôs V.")

    # ‚úÖ Validation finale
    st.divider()
    validate_step_button("multivariee")  # Remplacer validate_step par validate_step_button
