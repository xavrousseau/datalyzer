# =============================================================================
# üìö IMPORTATION DES LIBRAIRIES
# =============================================================================

# Loguru : biblioth√®que de logging facilitant la gestion des logs avec des fonctionnalit√©s avanc√©es
from loguru import logger  
# Pathlib : permet de manipuler facilement les chemins de fichiers de mani√®re orient√©e objet
from pathlib import Path    
# Pandas : biblioth√®que pour la manipulation et l'analyse des donn√©es sous forme de DataFrame
import pandas as pd         


# =============================================================================
# üìÅ CONFIGURATION DU FICHIER DE LOG
# =============================================================================

# D√©finition du chemin du fichier de log dans le dossier "logs" avec le nom "eda_transformations.log"
LOG_PATH = Path("logs/eda_transformations.log")
# Cr√©ation du dossier parent s'il n'existe pas d√©j√† (avec tous les dossiers n√©cessaires)
LOG_PATH.parent.mkdir(parents=True, exist_ok=True)

# Configuration de Loguru pour enregistrer les logs dans le fichier sp√©cifi√©
logger.add(
    str(LOG_PATH),  # Convertit le chemin en cha√Æne de caract√®res pour Loguru
    format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {message}",  # Format d'affichage de chaque entr√©e de log
    level="INFO",         # Niveau minimum des messages √† enregistrer (ex: INFO, WARNING, ERROR, etc.)
    rotation="1 week",    # Rotation du fichier de log toutes les semaines (les logs anciens sont archiv√©s)
    retention="4 weeks",  # Conservation des fichiers de log pendant 4 semaines maximum
    compression="zip",    # Compression des anciens fichiers de log au format ZIP pour √©conomiser de l'espace disque
    encoding="utf-8"      # Encodage utilis√© pour le fichier de log
)


# =============================================================================
# üìù ENREGISTREMENT D'UNE TRANSFORMATION
# =============================================================================

def log_transformation(message: str, level: str = "info"):
    """
    Enregistre un message de transformation dans le fichier de log.
    
    Cette fonction permet d'ajouter une entr√©e dans le fichier de log pour suivre 
    les transformations ou modifications effectu√©es sur les donn√©es durant l'analyse.
    
    Args:
        message (str): Le message d√©crivant la transformation effectu√©e.
        level (str): Le niveau de log √† utiliser ('info', 'warning', 'error', etc.). Par d√©faut "info".
    
    Exemple:
        log_transformation("Suppression des doublons effectu√©e.")
    """
    # Utilise getattr pour appeler dynamiquement la m√©thode de log correspondant au niveau sp√©cifi√© (e.g., logger.info, logger.error)
    getattr(logger, level)(message)


# =============================================================================
# üìÑ AFFICHAGE DES DERNIERS LOGS
# =============================================================================

def display_logs(n: int = 10) -> pd.DataFrame:
    """
    Charge et affiche les derniers logs depuis le fichier de log (non compress√©).

    Cette fonction lit le fichier de log et retourne les 'n' derni√®res entr√©es sous forme de DataFrame.
    En cas d'erreur lors de la lecture, un message d'erreur est logu√© et un DataFrame vide est retourn√©.

    Args:
        n (int): Nombre de lignes de log √† afficher. Par d√©faut, 10.

    Returns:
        pd.DataFrame: Un DataFrame contenant les derni√®res entr√©es de log avec les colonnes "date", "niveau" et "message".
    """
    try:
        # Lecture du fichier de log en sp√©cifiant le s√©parateur '|' et en attribuant des noms aux colonnes
        df = pd.read_csv(LOG_PATH, sep="|", header=None, names=["date", "niveau", "message"])
        # Retourne les 'n' derni√®res lignes du DataFrame
        return df.tail(n)
    except Exception as e:
        # En cas d'erreur, log l'erreur et retourne un DataFrame vide avec les colonnes attendues
        logger.error(f"Erreur lors du chargement des logs : {e}")
        return pd.DataFrame(columns=["date", "niveau", "message"])


# =============================================================================
# üîç LOG DES DIMENSIONS D'UN DATAFRAME
# =============================================================================

def log_dataframe_shape(df: pd.DataFrame, step: str):
    """
    Log la forme (dimensions) d'un DataFrame √† une √©tape pr√©cise du traitement.

    Cette fonction permet d'enregistrer dans le log le nombre de lignes et de colonnes d'un DataFrame,
    afin de suivre les changements apport√©s lors des diff√©rentes √©tapes de transformation des donn√©es.

    Args:
        df (pd.DataFrame): Le DataFrame √† analyser.
        step (str): Description de l'√©tape (exemple : "Apr√®s nettoyage", "Apr√®s suppression des doublons").

    Exemple:
        log_dataframe_shape(dataframe, "Apr√®s suppression des colonnes manquantes")
    """
    # Cr√©ation du message indiquant le nombre de lignes et de colonnes du DataFrame √† l'√©tape donn√©e
    message = f"{step} ‚Üí {df.shape[0]} lignes, {df.shape[1]} colonnes"
    # Enregistre le message avec le niveau INFO dans le fichier de log
    logger.info(message)
