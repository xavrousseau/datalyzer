# ============================================================
# Fichier : sections/anomalies.py
# Objectif : D√©tection d‚Äôoutliers (Z-score / IQR) par variable
# Version  : UI unifi√©e + barre compacte + √©tape EDA "outliers"
# Auteur   : Xavier Rousseau
# ============================================================

from __future__ import annotations

import pandas as pd
import plotly.express as px
import streamlit as st

from utils.steps import EDA_STEPS
from utils.snapshot_utils import save_snapshot
from utils.log_utils import log_action
from utils.filters import get_active_dataframe, validate_step_button
from utils.ui_utils import section_header, show_eda_progress, show_footer
from utils.eda_utils import detect_outliers  # source unique pour la d√©tection


def run_anomalies() -> None:
    """
    Atelier ¬´ Anomalies ¬ª (outliers univari√©s).

    M√©thodes propos√©es :
      - zscore : valeurs dont |(x - Œº) / œÉ| > seuil (par d√©faut 3).
      - iqr    : valeurs hors [Q1 - k*IQR ; Q3 + k*IQR] (k = seuil, par d√©faut 3).

    Parcours :
      1) S√©lectionner une variable num√©rique.
      2) Choisir m√©thode + seuil (interpr√©tation adapt√©e √† la m√©thode).
      3) Visualiser histogramme + bornes, lister les outliers.
      4) Exporter le sous-ensemble (snapshot) et/ou supprimer des lignes.

    Robustesse :
      - Ignore les NaN et non-finis pour les stats (remplac√©s par NaN).
      - G√®re œÉ=0 (distribution plate) et IQR=0 (Q1=Q3) sans tracer de bornes.
    """
    # ---------- En-t√™te unifi√© ----------
    section_header(
        title="Anomalies",
        subtitle="D√©tection de valeurs extr√™mes via Z-score ou IQR.",
        section="analyse",   # ‚Üí image depuis config.SECTION_BANNERS["analyse"]
        emoji="üö®",
    )

    # ---------- Barre de progression (visuelle) ----------
    show_eda_progress(EDA_STEPS, compact=True, single_row=True)

    # ---------- DataFrame actif ----------
    df, nom = get_active_dataframe()
    if df is None:
        st.warning("‚ùå Aucun fichier actif. S√©lectionnez/chargez un fichier dans l‚Äôonglet **Chargement**.")
        return

    # Colonnes num√©riques uniquement (zscore/iqr supposent des quantit√©s)
    numerical_cols = df.select_dtypes(include="number").columns.tolist()
    if not numerical_cols:
        st.error("‚ùå Aucune variable num√©rique d√©tect√©e dans le fichier.")
        return

    # ---------- Param√®tres d'analyse ----------
    col = st.selectbox("üìà Variable √† analyser", numerical_cols, key="anom_col")
    method = st.radio(
        "üßÆ M√©thode de d√©tection",
        ["zscore", "iqr"],
        horizontal=True,
        key="anom_method",
        help=(
            "Z-score : |(x-Œº)/œÉ| > seuil (ex. 3). "
            "IQR : hors [Q1 - k¬∑IQR ; Q3 + k¬∑IQR] (k = seuil, ex. 1.5 ou 3)."
        ),
    )
    # Par convention : z=3 (classique) ; pour IQR, k=1.5 ou 3 sont courants.
    default_thr = 3.0 if method == "zscore" else 1.5
    threshold = st.slider(
        "Seuil de d√©tection",
        min_value=0.5, max_value=5.0, value=default_thr, step=0.5, key="anom_thr",
        help="Z-score : seuil en √©cart-types ; IQR : multiplicateur de l‚Äôintervalle inter-quartile."
    )

    # S√©rie nettoy√©e pour les statistiques (NaN/¬±inf -> NaN)
    serie = pd.to_numeric(df[col], errors="coerce")
    finite_mask = pd.Series(pd.notna(serie) & ~pd.isna(serie))
    serie = serie[finite_mask]

    # Stats utiles pour bornes & annotations
    mu = float(serie.mean()) if not serie.empty else 0.0
    sigma = float(serie.std(ddof=0)) if not serie.empty else 0.0
    q1 = float(serie.quantile(0.25)) if not serie.empty else 0.0
    q3 = float(serie.quantile(0.75)) if not serie.empty else 0.0
    iqr = q3 - q1

    # ---------- D√©tection via utilitaire commun ----------
    try:
        outliers = detect_outliers(df[[col]], method=method, threshold=threshold)
        # Harmonisation du retour (Index ou DataFrame) en DataFrame complet :
        if isinstance(outliers, pd.Index):
            outliers_df = df.loc[outliers].copy()
        elif isinstance(outliers, pd.DataFrame):
            # Si l‚Äôoutil renvoie un DF filtr√© avec la seule colonne, on remonte les lignes compl√®tes
            outliers_df = df.loc[outliers.index].copy() if list(outliers.columns) == [col] else outliers.copy()
        else:
            outliers_df = df.iloc[0:0].copy()
    except Exception as e:
        st.error(f"‚ùå Erreur dans la d√©tection des outliers : {e}")
        return

    # Marqueur visuel (facilite l‚Äôexport/filtrage)
    if not outliers_df.empty:
        outliers_df["__outlier_sur__"] = col

    # ---------- R√©sultats & visuels ----------
    n_out = len(outliers_df)
    st.markdown(f"### üîé R√©sultats : **{n_out} outlier(s)** d√©tect√©(s) sur `{col}` (m√©thode : **{method}**)")

    if n_out:
        with st.expander("üîé D√©tails des outliers d√©tect√©s"):
            st.dataframe(outliers_df.head(10), use_container_width=True)

    # Histogramme global avec bornes selon la m√©thode choisie
    fig = px.histogram(df, x=col, nbins=40, title=f"Distribution de {col}")

    if method == "zscore":
        if sigma == 0 or not pd.isfinite(sigma):
            st.info("‚ÑπÔ∏è œÉ = 0 (ou non d√©fini) : pas de bornes Z-score trac√©es.")
        else:
            lower = mu - threshold * sigma
            upper = mu + threshold * sigma
            fig.add_vline(x=lower, line_color="red", line_dash="dash")
            fig.add_vline(x=upper, line_color="red", line_dash="dash")
            st.caption(f"Bornes Z-score : [{lower:.3g}, {upper:.3g}]  (Œº={mu:.3g}, œÉ={sigma:.3g}, z={threshold})")
    else:  # IQR
        if iqr == 0 or not pd.isfinite(iqr):
            st.info("‚ÑπÔ∏è IQR = 0 (Q1=Q3) : pas de bornes IQR trac√©es.")
        else:
            lower = q1 - threshold * iqr
            upper = q3 + threshold * iqr
            fig.add_vline(x=lower, line_color="red", line_dash="dash")
            fig.add_vline(x=upper, line_color="red", line_dash="dash")
            st.caption(f"Bornes IQR : [{lower:.3g}, {upper:.3g}]  (Q1={q1:.3g}, Q3={q3:.3g}, IQR={iqr:.3g}, k={threshold})")

    st.plotly_chart(fig, use_container_width=True)

    # ---------- Export / snapshot des anomalies ----------
    if n_out and st.button("üíæ Exporter les anomalies d√©tect√©es", key="anom_export"):
        save_snapshot(outliers_df, suffix=f"outliers_{method}")
        log_action("anomalies_export", f"{n_out} outliers sur {col} via {method} (seuil={threshold})")
        st.success("‚úÖ Snapshot des outliers sauvegard√©.")

    # ---------- S√©lection & correction (suppression) ----------
    if n_out:
        st.subheader("üîß S√©lection et correction des outliers")
        selected_idx = st.multiselect(
            "Lignes √† supprimer (index du DataFrame)",
            options=outliers_df.index.tolist(),
            key="anom_sel_idx",
            help="Vous pouvez s√©lectionner un sous-ensemble d‚Äôoutliers √† retirer."
        )
        if selected_idx:
            df_corrected = df.drop(index=selected_idx)
            st.session_state["df"] = df_corrected
            save_snapshot(df_corrected, suffix=f"{col}_outliers_removed")
            log_action("anomalies_removed", f"{len(selected_idx)} supprim√©s sur {col}")
            st.success(f"‚úÖ {len(selected_idx)} outlier(s) supprim√©(s).")

            with st.expander("üìä Impact des suppressions", expanded=False):
                before = df[col]
                after = df_corrected[col]
                st.write("Avant :", before.describe())
                st.write("Apr√®s  :", after.describe())
    else:
        st.success("‚úÖ Aucun outlier d√©tect√© sur cette variable.")

    # ---------- Validation d‚Äô√©tape (coh√©rente avec config.EDA_STEPS) ----------
    validate_step_button("outliers", context_prefix="anomalies_")

    # ---------- Footer ----------
    show_footer(
        author="Xavier Rousseau",
        site_url="https://xavrousseau.github.io/",
        version="1.0",
    )
