# ============================================================
# Fichier : sections/export.py
# Objectif : Export des donn√©es avec s√©lection de colonnes,
#            format, logs, snapshot et t√©l√©chargement
# Version : enrichie, comment√©e, avec pr√©visualisation & compression
# ============================================================

from __future__ import annotations

import os
import re
import time
import base64
from io import BytesIO
from typing import Tuple

import pandas as pd
import streamlit as st
from PIL import Image

from utils.snapshot_utils import save_snapshot
from utils.log_utils import log_action
from utils.filters import get_active_dataframe
from utils.ui_utils import show_icon_header, show_footer

# =============================== Header visuel =================================
def _render_header_image() -> None:
    """
    Affiche une banni√®re en-t√™te centr√©e, avec fallback informatif en cas d'absence.
    Conserve l'approche base64 (style custom) pour √©viter les chemins statiques relatifs
    cass√©s en prod (CDN) ‚Äî alternative simple : st.image(..., use_container_width=True).
    """
    image_path = "static/images/headers/header_cherry_gateway.png"  
    try:
        img = Image.open(image_path).resize((900, 220))
        buffer = BytesIO()
        img.save(buffer, format="PNG")
        base64_img = base64.b64encode(buffer.getvalue()).decode("utf-8")

        st.markdown(
            f"""
            <div style='display:flex;justify-content:center;margin-bottom:1.5rem;'>
              <img src="data:image/png;base64,{base64_img}" alt="Banni√®re Datalyzer"
                   style="border-radius:12px;box-shadow:0 2px 8px rgba(0,0,0,0.2);" />
            </div>
            """,
            unsafe_allow_html=True,
        )
    except Exception as e:
        # On informe sans bloquer l'app (image d√©corative)
        st.info("Aucune image d‚Äôen-t√™te trouv√©e.")
        st.caption(f"(D√©tail : {e})")

# =============================== Helpers ======================================
def _sanitize_filename(name: str) -> str:
    """Rend un nom de fichier s√ªr (alphanum√©rique + _ - .)."""
    name = (name or "").strip()
    name = re.sub(r"[^\w\-.]+", "_", name)
    name = re.sub(r"_+", "_", name).strip("_.")
    return name or "export"

def _ensure_extension(filename: str, file_format: str) -> str:
    """Ajoute l'extension si manquante, en coh√©rence avec le format choisi."""
    ext = file_format.lower()
    if not filename.lower().endswith(f".{ext}"):
        return f"{filename}.{ext}"
    return filename

def _mime_for(fmt: str) -> str:
    """Type MIME par format."""
    return {
        "csv": "text/csv",
        "xlsx": "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        "json": "application/json",
        "parquet": "application/octet-stream",
    }.get(fmt, "application/octet-stream")

# =============================== Vue principale ================================
def run_export() -> None:
    """
    Page d'export :
      - S√©lection du DataFrame actif
      - Choix des colonnes & format
      - Options (index, encodage, compression)
      - √âcriture disque + t√©l√©chargement
      - Log + snapshot
    """
    # --- En-t√™te visuel (banni√®re base64 + titre) ---
    _render_header_image()
    show_icon_header(
        "üíæ", "Export du fichier final",
        "Choisissez les colonnes, le format et t√©l√©chargez votre fichier propre."
    )

    # --- R√©cup√©ration du DF actif ---
    df, nom = get_active_dataframe()
    if df is None or df.empty:
        st.warning("‚ùå Aucune donn√©e disponible pour l‚Äôexport.")
        return

    st.markdown(f"üîé **Fichier actif : `{nom}`**")
    st.markdown(f"**{df.shape[0]} lignes √ó {df.shape[1]} colonnes**")

    # --- S√©lection des colonnes ---
    st.markdown("### üß© Colonnes √† inclure")
    selected_columns = st.multiselect(
        "S√©lectionnez les colonnes √† exporter",
        options=df.columns.tolist(),
        default=df.columns.tolist(),
        help="D√©cochez les colonnes inutiles pour un export plus l√©ger."
    )
    st.write(f"üî¢ **{len(selected_columns)} colonne(s) s√©lectionn√©e(s)**")
    if not selected_columns:
        st.info("S√©lectionnez au moins une colonne pour poursuivre.")
        return

    with st.expander("üîç Aper√ßu des colonnes s√©lectionn√©es", expanded=False):
        st.dataframe(df[selected_columns].head(50), use_container_width=True)

    # --- Options de base ---
    include_index = st.checkbox("Inclure l‚Äôindex dans le fichier export√©", value=False)

    st.markdown("### üì¶ Format du fichier")
    file_format = st.selectbox("Format", options=["csv", "xlsx", "json", "parquet"], index=0)

    col_enc, col_comp = st.columns(2)
    with col_enc:
        encoding = st.selectbox(
            "Encodage (CSV/JSON)",
            options=["utf-8", "utf-8-sig", "latin-1"],
            index=0,
            help="UTF-8 recommand√©. 'utf-8-sig' ajoute BOM (utile pour Excel ancien)."
        ) if file_format in {"csv", "json"} else "utf-8"

    with col_comp:
        compression = st.selectbox(
            "Compression",
            options=["aucune", "gzip"],
            index=0,
            help="CSV/JSON/Parquet supportent gzip. XLSX est d√©j√† compress√©."
        ) if file_format in {"csv", "json", "parquet"} else "aucune"

    # --- Nom de fichier propos√© ---
    ts = int(time.time())
    default_base = _sanitize_filename(f"export_final_{ts}")
    file_name_input = st.text_input(
        "Nom du fichier export√© (sans extension ou avec extension correspondante)",
        value=default_base
    )
    file_name_input = _sanitize_filename(file_name_input)
    file_name = _ensure_extension(file_name_input, file_format)

    # --- Action d'export ---
    st.markdown("### ‚¨áÔ∏è G√©n√©ration du fichier")
    if st.button("üì• G√©n√©rer et t√©l√©charger le fichier", type="primary"):
        try:
            df_export = df[selected_columns]

            export_dir = os.path.join("data", "exports")
            os.makedirs(export_dir, exist_ok=True)
            export_path = os.path.join(export_dir, file_name)

            if file_format == "csv":
                comp = "gzip" if compression == "gzip" else None
                df_export.to_csv(
                    export_path,
                    index=include_index,
                    encoding=encoding,
                    lineterminator="\n",
                    compression=comp
                )
            elif file_format == "xlsx":
                df_export.to_excel(export_path, index=include_index, engine="openpyxl")
            elif file_format == "json":
                if compression == "gzip":
                    df_export.to_json(export_path, orient="records", force_ascii=False, compression="gzip")
                else:
                    df_export.to_json(export_path, orient="records", force_ascii=False)
            elif file_format == "parquet":
                comp = "gzip" if compression == "gzip" else None
                df_export.to_parquet(export_path, index=include_index, compression=comp)
            else:
                raise ValueError(f"Format non g√©r√© : {file_format}")

            # --- Log + snapshot (lisible, non compress√©) ---
            save_snapshot(df_export, label="export_final", suffix=file_format)
            log_action(
                "export",
                f"{file_name} ‚Äî {len(selected_columns)} colonnes ‚Äî format={file_format} ‚Äî comp={compression}"
            )

            # --- T√©l√©chargement ---
            with open(export_path, "rb") as f:
                payload = f.read()

            st.success(f"‚úÖ Fichier export√© : **{file_name}**")
            st.download_button(
                label="üì• T√©l√©charger maintenant",
                data=payload,
                file_name=file_name,
                mime=_mime_for(file_format)
            )
            st.caption(f"Fichier enregistr√© sur disque : `{export_path}`")

        except Exception as e:
            st.error(f"‚ùå Erreur pendant l‚Äôexport : {e}")

    # --- Pied de page ---
    show_footer("Xavier Rousseau", "xavier-data")
