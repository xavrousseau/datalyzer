# ============================================================
# Fichier : sections/export.py
# Objectif : Export des donn√©es avec s√©lection de colonnes,
#            format, logs, snapshot et t√©l√©chargement
# Version : enrichie, comment√©e, avec pr√©visualisation & compression
# Design  : API UI unifi√©e (section_header, show_footer)
# Auteur  : Xavier Rousseau
# ============================================================

from __future__ import annotations

import os
import re
import time
from typing import Tuple

import pandas as pd
import streamlit as st

from utils.snapshot_utils import save_snapshot
from utils.log_utils import log_action
from utils.filters import get_active_dataframe
from utils.ui_utils import section_header, show_footer  # ‚Üê unifi√©


# =============================== Helpers ======================================

def _sanitize_filename(name: str) -> str:
    """
    Produit un nom de fichier ¬´ s√ªr ¬ª (alphanum√©rique + '_' + '-' + '.').

    Pourquoi :
      - √âvite les caract√®res probl√©matiques (espaces, guillemets, diacritiques)
        pour des syst√®mes de fichiers vari√©s et des usages web.

    Param√®tres
    ----------
    name : str
        Base propos√©e par l'utilisateur (peut √™tre vide).

    Retour
    ------
    str
        Nom nettoy√©, compact√©, sans pr√©/suffixes '_' ou '.', ou "export" par d√©faut.
    """
    name = (name or "").strip()
    name = re.sub(r"[^\w\-.]+", "_", name)
    name = re.sub(r"_+", "_", name).strip("_.")
    return name or "export"


def _ensure_extension(filename: str, file_format: str) -> str:
    """
    Garantit que le nom se termine par l'extension coh√©rente avec `file_format`.

    Exemple :
      ("report", "csv")   -> "report.csv"
      ("report.CSV", "csv") -> "report.CSV" (d√©j√† ok, insensible √† la casse)
    """
    ext = file_format.lower()
    if not filename.lower().endswith(f".{ext}"):
        return f"{filename}.{ext}"
    return filename


def _mime_for(fmt: str) -> str:
    """
    Retourne le type MIME pour le bouton de t√©l√©chargement.

    Remarque :
      - Parquet n'a pas de consensus parfait ; on utilise 'application/octet-stream'
        pour une compat g√©n√©rique (navigateurs/OS).
    """
    return {
        "csv": "text/csv",
        "xlsx": "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        "json": "application/json",
        "parquet": "application/octet-stream",
    }.get(fmt, "application/octet-stream")


# =============================== Vue principale ================================

def run_export() -> None:
    """
    Affiche la page ¬´ Export du fichier final ¬ª.

    Parcours utilisateur :
      1) R√©cup√©ration du DataFrame actif (source de v√©rit√©).
      2) S√©lection des colonnes √† inclure (pr√©visualisation born√©e).
      3) Choix du format (CSV/XLSX/JSON/Parquet), index, encodage, compression.
      4) G√©n√©ration du fichier sur disque (data/exports) + payload m√©moire.
      5) Snapshot + log + bouton de t√©l√©chargement.

    D√©pendances attendues :
      - `get_active_dataframe()` -> (df: pd.DataFrame | None, nom: str)
      - `save_snapshot(df, suffix=...)` pour archivage l√©ger
      - `log_action(event, details)` pour la tra√ßabilit√©
      - `section_header(...)` / `show_footer(...)` pour l‚ÄôUX unifi√©e

    S√©curit√© & perf :
      - Pr√©visualisation limit√©e (head(50)).
      - Encodage explicite pour CSV/JSON (UTF-8 par d√©faut).
      - Compression 'gzip' optionnelle (CSV/JSON/Parquet).
    """
    # ---------- En-t√™te unifi√© : banni√®re + titre + baseline ----------
    section_header(
        title="Export du fichier final",
        subtitle="Choisissez les colonnes, le format et t√©l√©chargez votre fichier propre.",
        section="export",   # ‚Üí config.SECTION_BANNERS["export"]
        emoji="üíæ",
    )

    # ---------- R√©cup√©ration du DF actif ----------
    df, nom = get_active_dataframe()
    if df is None or df.empty:
        st.warning("‚ùå Aucune donn√©e disponible pour l‚Äôexport.")
        return

    st.markdown(f"üîé **Fichier actif : `{nom}`**")
    st.markdown(f"**{df.shape[0]} lignes √ó {df.shape[1]} colonnes**")

    # ---------- S√©lection des colonnes ----------
    st.markdown("### üß© Colonnes √† inclure")
    selected_columns = st.multiselect(
        "S√©lectionnez les colonnes √† exporter",
        options=df.columns.tolist(),
        default=df.columns.tolist(),
        help="D√©cochez les colonnes inutiles pour un export plus l√©ger."
    )
    st.write(f"üî¢ **{len(selected_columns)} colonne(s) s√©lectionn√©e(s)**")
    if not selected_columns:
        st.info("S√©lectionnez au moins une colonne pour poursuivre.")
        return

    with st.expander("üîç Aper√ßu des colonnes s√©lectionn√©es", expanded=False):
        st.dataframe(df[selected_columns].head(50), use_container_width=True)

    # ---------- Options de base ----------
    include_index = st.checkbox("Inclure l‚Äôindex dans le fichier export√©", value=False)

    st.markdown("### üì¶ Format du fichier")
    file_format = st.selectbox("Format", options=["csv", "xlsx", "json", "parquet"], index=0)

    col_enc, col_comp = st.columns(2)

    # Encodage : pertinent pour CSV/JSON uniquement
    with col_enc:
        encoding = (
            st.selectbox(
                "Encodage (CSV/JSON)",
                options=["utf-8", "utf-8-sig", "latin-1"],
                index=0,
                help=(
                    "UTF-8 recommand√©. 'utf-8-sig' ajoute un BOM (utile pour Excel ancien) ; "
                    "'latin-1' seulement si vous ciblez un outil qui ne lit pas l‚ÄôUTF-8."
                ),
            )
            if file_format in {"csv", "json"}
            else "utf-8"
        )

    # Compression : XLSX est d√©j√† zipp√© par nature (format OOXML)
    with col_comp:
        compression = (
            st.selectbox(
                "Compression",
                options=["aucune", "gzip"],
                index=0,
                help="CSV/JSON/Parquet supportent gzip. XLSX est d√©j√† compress√©.",
            )
            if file_format in {"csv", "json", "parquet"}
            else "aucune"
        )

    # ---------- Nom de fichier propos√© ----------
    ts = int(time.time())
    default_base = _sanitize_filename(f"export_final_{ts}")
    file_name_input = st.text_input(
        "Nom du fichier export√© (sans extension ou avec extension correspondante)",
        value=default_base,
    )
    file_name_input = _sanitize_filename(file_name_input)
    file_name = _ensure_extension(file_name_input, file_format)

    # ---------- Action d'export ----------
    st.markdown("### ‚¨áÔ∏è G√©n√©ration du fichier")
    if st.button("üì• G√©n√©rer et t√©l√©charger le fichier", type="primary"):
        try:
            # 1) Sous-ensemble de colonnes
            df_export = df[selected_columns]

            # 2) Pr√©pare le r√©pertoire cible (persistant pour audit)
            export_dir = os.path.join("data", "exports")
            os.makedirs(export_dir, exist_ok=True)
            export_path = os.path.join(export_dir, file_name)

            # 3) √âcriture selon format
            if file_format == "csv":
                comp = "gzip" if compression == "gzip" else None
                # lineterminator '\n' : compatible Unix/Win, √©vite '\r\n\r\n'
                df_export.to_csv(
                    export_path,
                    index=include_index,
                    encoding=encoding,
                    lineterminator="\n",
                    compression=comp,
                )

            elif file_format == "xlsx":
                # Remarque : engine="openpyxl" ‚Üí coherent avec requirements.
                # Si taille tr√®s grande, xlsxwriter peut √™tre plus rapide.
                df_export.to_excel(export_path, index=include_index, engine="openpyxl")

            elif file_format == "json":
                comp = "gzip" if compression == "gzip" else None
                # orient="records" : JSON lisible pour ingestion/outils BI.
                # force_ascii=False : pr√©server les accents.
                df_export.to_json(
                    export_path,
                    orient="records",
                    force_ascii=False,
                    compression=comp,
                )

            elif file_format == "parquet":
                comp = "gzip" if compression == "gzip" else None
                # Parquet : typage pr√©serv√©, stockage colonne, id√©al gros volumes.
                df_export.to_parquet(export_path, index=include_index, compression=comp)

            else:
                raise ValueError(f"Format non g√©r√© : {file_format}")

            # 4) Log + snapshot (suffix = format ; lisible dans l‚Äôhistorique)
            save_snapshot(df_export, suffix=file_format)
            log_action(
                "export",
                f"{file_name} ‚Äî {len(selected_columns)} colonnes ‚Äî format={file_format} ‚Äî comp={compression}",
            )

            # 5) Pr√©pare le payload pour le bouton de t√©l√©chargement
            with open(export_path, "rb") as f:
                payload = f.read()

            st.success(f"‚úÖ Fichier export√© : **{file_name}**")
            st.download_button(
                label="üì• T√©l√©charger maintenant",
                data=payload,
                file_name=file_name,
                mime=_mime_for(file_format),
            )
            st.caption(f"Fichier enregistr√© sur disque : `{export_path}`")

        except Exception as e:
            # Message concis c√¥t√© UI ; d√©tails suppl√©mentaires possibles c√¥t√© logs serveur.
            st.error(f"‚ùå Erreur pendant l‚Äôexport : {e}")

    # ---------- Footer ----------
    show_footer(
        author="Xavier Rousseau",
        site_url="https://xavrousseau.github.io/",
        version="1.0",
    )
