# =============================================================================
# IMPORTATION DES LIBRAIRIES
# =============================================================================

# streamlit est une biblioth√®que permettant de cr√©er des interfaces web interactives en Python.
# Elle facilite la cr√©ation d'applications d'analyse de donn√©es et de visualisations en quelques lignes.
import streamlit as st

# pandas est une biblioth√®que incontournable pour la manipulation et l'analyse de donn√©es tabulaires.
import pandas as pd

# requests est utilis√© pour effectuer des requ√™tes HTTP vers une API (ici, pour communiquer avec le backend).
import requests

# plotly.express permet de cr√©er des graphiques interactifs de mani√®re simple.
import plotly.express as px

# os permet d'interagir avec le syst√®me de fichiers (par exemple, r√©cup√©rer des variables d'environnement).
import os


# =============================================================================
# IMPORT DES FONCTIONS D‚ÄôANALYSE EDA ET DE LOG
# =============================================================================

# Importation des fonctions d'analyse exploratoire des donn√©es (EDA) depuis le module eda_utils.
# Ces fonctions effectuent des t√¢ches telles que la d√©tection de types de variables,
# le calcul de corr√©lations, la d√©tection d'outliers et la pr√©paration des donn√©es pour l'encodage.
from eda_utils import (
    detect_variable_types,      # D√©tecte automatiquement les types de variables (num√©riques, cat√©gorielles, etc.)
    compute_correlation_matrix,   # Calcule la matrice de corr√©lation entre les variables num√©riques
    detect_outliers_iqr,          # D√©tecte les outliers √† l'aide de la m√©thode des quartiles (IQR)
    detect_constant_columns,      # Identifie les colonnes ayant des valeurs constantes
    detect_low_variance_columns,  # Identifie les colonnes √† faible variance (peu d'information)
    encode_categorical            # Encode les variables cat√©gorielles (m√©thode onehot ou ordinal)
)

# Importation d'une fonction de log pour enregistrer les transformations effectu√©es sur le DataFrame.
from log_utils import log_transformation


# =============================================================================
# CONFIGURATION DE L'API BACKEND
# =============================================================================

# R√©cup√®re l'URL de l'API backend depuis une variable d'environnement (utile en d√©ploiement)
# Si la variable n'est pas d√©finie, on utilise "http://fastapi:8000" par d√©faut.
API_URL = os.getenv("API_URL", "http://fastapi:8000")


# =============================================================================
# CONFIGURATION ET INITIALISATION DE LA PAGE STREAMLIT
# =============================================================================

# Configuration de la page Streamlit avec un titre et une mise en page √©tendue ("wide")
st.set_page_config(page_title="EDA Explorer", layout="wide")

# Affiche le titre principal de l'application dans l'interface web
st.title("üìä EDA Explorer ‚Äì Application d'analyse exploratoire de donn√©es")


# =============================================================================
# 1. CHARGEMENT DU FICHIER CSV
# =============================================================================

# Affiche un en-t√™te pour la section de chargement du fichier CSV
st.header("1. Charger un fichier CSV")

# Cr√©e un widget permettant √† l'utilisateur de s√©lectionner et uploader un fichier CSV
uploaded_file = st.file_uploader("Choisir un fichier", type=["csv"])

# Initialisation du DataFrame qui contiendra les donn√©es upload√©es
df = None

# Si un fichier est upload√©, on proc√®de √† son traitement
if uploaded_file:
    try:
        # Envoie une requ√™te POST vers l'API backend pour uploader le fichier CSV
        response = requests.post(
            f"{API_URL}/upload/",
            files={"file": (uploaded_file.name, uploaded_file, "text/csv")}
        )

        # V√©rifie si l'upload s'est d√©roul√© avec succ√®s (code 200)
        if response.status_code == 200:
            # R√©cup√©ration des m√©tadonn√©es retourn√©es par le backend (colonnes, nombre de lignes, etc.)
            meta = response.json()
            st.success("‚úÖ Fichier charg√© avec succ√®s.")
            st.write("üìå **Colonnes :**", meta["columns"])
            st.write("üìä **Nombre de lignes :**", meta["rows"])

            # R√©cup√®re les 500 premi√®res lignes du fichier pour afficher un aper√ßu
            head_response = requests.get(f"{API_URL}/head?n=500")
            if head_response.status_code == 200:
                head = head_response.json()
                # Conversion des donn√©es JSON en DataFrame pandas
                df = pd.DataFrame(head) if isinstance(head, list) and head else None
            else:
                # Affiche une erreur si l'extraction des donn√©es √©choue
                st.error("‚ùå Erreur lors de la r√©cup√©ration des donn√©es.")
                st.error(head_response.text)
        else:
            # Affiche une erreur si le backend renvoie un code d'erreur autre que 200
            st.error(f"‚ùå Erreur serveur : {response.status_code}")
            st.error(response.text)
    except Exception as e:
        # Gestion d'une erreur inattendue lors de l'upload
        st.error(f"‚ùå Erreur inattendue : {e}")


# =============================================================================
# 2. ANALYSE EXPLORATOIRE G√âN√âRALE (SANS CIBLE)
# =============================================================================

# Si le DataFrame a bien √©t√© charg√©, on passe √† l'analyse exploratoire
if df is not None:
    st.header("2. Analyse exploratoire g√©n√©rale")

    # -------------------------------------------
    # D√©tection automatique des types de variables
    # -------------------------------------------
    with st.expander("üìå Types de variables d√©tect√©es", expanded=False):
        st.info("D√©tection automatique des types : num√©rique, cat√©gorielle, binaire, texte libre.")
        # Affiche un tableau avec le type de chaque variable, tel que d√©tect√© par la fonction d√©di√©e
        st.dataframe(detect_variable_types(df))

    # R√©cup√©ration des colonnes num√©riques et cat√©gorielles pour les analyses suivantes
    num_cols = df.select_dtypes(include=["number"]).columns.tolist()
    cat_cols = df.select_dtypes(include=["object", "category"]).columns.tolist()

    # Si aucune colonne num√©rique n'est d√©tect√©e, on arr√™te l'ex√©cution de l'analyse
    if not num_cols:
        st.warning("‚ö†Ô∏è Aucune variable num√©rique d√©tect√©e.")
        st.stop()

    # -------------------------------------------
    # Histogrammes des variables num√©riques
    # -------------------------------------------
    with st.expander("üìà Distributions des variables num√©riques", expanded=False):
        st.info("Histogrammes des variables num√©riques.")
        # Permet √† l'utilisateur de s√©lectionner une variable num√©rique pour afficher son histogramme
        col = st.selectbox("S√©lectionner une variable", num_cols)
        st.plotly_chart(px.histogram(df, x=col), use_container_width=True)

    # -------------------------------------------
    # Analyse des outliers via la m√©thode IQR
    # -------------------------------------------
    with st.expander("üö® Analyse des outliers (IQR)", expanded=False):
        st.info("M√©thode des quartiles (IQR).")
        # S√©lection de la variable num√©rique √† analyser pour la d√©tection d'outliers
        col = st.selectbox("Variable num√©rique √† analyser", num_cols, key="iqr_col")
        # D√©tection des outliers √† l'aide de la fonction d√©di√©e
        outliers = detect_outliers_iqr(df, col)
        st.write(f"{len(outliers)} outliers d√©tect√©s.")
        # Affichage des outliers dans un tableau
        st.dataframe(outliers)

    # -------------------------------------------
    # Suggestions automatiques de nettoyage des donn√©es
    # -------------------------------------------
    with st.expander("üßπ Suggestions de nettoyage", expanded=False):
        st.info("D√©tection automatique : constantes, faible variance, valeurs manquantes.")
        st.write("Colonnes constantes :", detect_constant_columns(df))
        st.write("Colonnes √† faible variance :", detect_low_variance_columns(df))
        # Calcul et affichage du pourcentage de valeurs manquantes par colonne
        missing = df.isnull().mean().sort_values(ascending=False)
        st.write("Valeurs manquantes :", missing[missing > 0])

    # -------------------------------------------
    # Nettoyage manuel des donn√©es
    # -------------------------------------------
    with st.expander("üßº Nettoyage manuel", expanded=False):
        # Bouton pour supprimer les doublons via l'API backend
        if st.button("Supprimer les doublons"):
            res = requests.post(f"{API_URL}/drop-duplicates/").json()
            st.success(f"{res['removed']} doublons supprim√©s.")
            # Mise √† jour locale du DataFrame apr√®s suppression des doublons
            updated = requests.get(f"{API_URL}/head?n=500").json()
            df = pd.DataFrame(updated)

        # Permet √† l'utilisateur de s√©lectionner des colonnes √† supprimer manuellement
        cols_to_drop = st.multiselect("Colonnes √† supprimer", df.columns.tolist())
        if cols_to_drop and st.button("Supprimer les colonnes s√©lectionn√©es"):
            res = requests.post(f"{API_URL}/drop-columns/", json={"columns": cols_to_drop})
            st.success(res.json()["message"])
            # Mise √† jour locale du DataFrame apr√®s suppression des colonnes
            updated = requests.get(f"{API_URL}/head?n=500").json()
            df = pd.DataFrame(updated)


# =============================================================================
# 3. ANALYSE ORIENT√âE VARIABLE CIBLE
# =============================================================================

# Cette section permet de guider l'analyse en se focalisant sur une ou deux variables cibles
if df is not None:
    st.header("3. Analyse orient√©e variable cible")
    st.markdown("D√©finissez une ou deux variables cibles num√©riques pour guider l‚Äôanalyse.")

    # S√©lection des variables cibles principales et secondaires dans les colonnes num√©riques
    target_1 = st.selectbox("üéØ Variable cible principale", num_cols, key="target1")
    target_2 = st.selectbox("üéØ Variable cible secondaire (optionnel)", [None] + num_cols, key="target2")

    # -------------------------------------------
    # Analyse de la corr√©lation entre les variables et la cible principale
    # -------------------------------------------
    with st.expander("üìä Corr√©lations avec la cible", expanded=False):
        st.info("Analyse des corr√©lations lin√©aires (Pearson).")
        # Calcul de la corr√©lation entre la cible principale et toutes les autres variables num√©riques
        corr = df.select_dtypes(include=["number"]).corr()[target_1].drop(target_1).sort_values(ascending=False)
        st.dataframe(corr)
        # Visualisation de la corr√©lation sous forme de graphique √† barres
        st.plotly_chart(px.bar(corr.reset_index(), x="index", y=target_1), use_container_width=True)

    # -------------------------------------------
    # Graphiques exploratoires m√©tiers bas√©s sur une variable cat√©gorielle
    # -------------------------------------------
    with st.expander("üìà Graphiques exploratoires m√©tiers", expanded=False):
        # S√©lection d'une variable cat√©gorielle pour le groupement
        group_col = st.selectbox("Variable cat√©gorielle", cat_cols, key="groupcol")
        st.info("Bar chart de la moyenne de la cible par groupe.")

        # Calcul et affichage de la moyenne de la cible principale par groupe
        avg_target1 = df.groupby(group_col)[target_1].mean().sort_values(ascending=False).reset_index()
        st.plotly_chart(px.bar(avg_target1, x=group_col, y=target_1), use_container_width=True)

        # Si une seconde cible est s√©lectionn√©e, affiche √©galement la moyenne correspondante par groupe
        if target_2:
            avg_target2 = df.groupby(group_col)[target_2].mean().sort_values(ascending=False).reset_index()
            st.plotly_chart(px.bar(avg_target2, x=group_col, y=target_2), use_container_width=True)

    # -------------------------------------------
    # Encodage des variables cat√©gorielles
    # -------------------------------------------
    with st.expander("üîÑ Encodage des variables cat√©gorielles", expanded=False):
        st.info("OneHot ou Ordinal Encoding.")
        # Permet √† l'utilisateur de s√©lectionner les colonnes cat√©gorielles √† encoder
        selected = st.multiselect("Colonnes √† encoder", cat_cols)
        # Choix de la m√©thode d'encodage entre onehot et ordinal
        method = st.radio("M√©thode", ["onehot", "ordinal"])
        if st.button("Encoder"):
            # Applique l'encodage sur une copie du DataFrame
            df_encoded = encode_categorical(df.copy(), method=method, columns=selected)
            st.success(f"{len(selected)} colonnes encod√©es avec la m√©thode '{method}'.")
            st.dataframe(df_encoded.head())

    # -------------------------------------------
    # Visualisation avec un boxplot interactif
    # -------------------------------------------
    with st.expander("üì¶ Boxplot interactif", expanded=False):
        st.info("Visualise la dispersion selon une cat√©gorie.")
        # S√©lection d'une variable cat√©gorielle pour l'axe X et d'une variable num√©rique pour l'axe Y
        cat_col = st.selectbox("X = variable cat√©gorielle", cat_cols, key="box_cat")
        num_col = st.selectbox("Y = variable num√©rique", num_cols, key="box_num")
        st.plotly_chart(px.box(df, x=cat_col, y=num_col), use_container_width=True)

    # -------------------------------------------
    # Visualisation avec un scatter plot interactif
    # -------------------------------------------
    with st.expander("üßÆ Scatter Plot interactif", expanded=False):
        st.info("Nuage de points entre deux variables num√©riques.")
        # S√©lection des variables num√©riques pour les axes X et Y, et optionnellement une variable pour la couleur
        x = st.selectbox("X", num_cols, key="xscatter")
        y = st.selectbox("Y", num_cols, key="yscatter")
        color = st.selectbox("Couleur (optionnelle)", [None] + cat_cols, key="color_scatter")
        st.plotly_chart(px.scatter(df, x=x, y=y, color=color), use_container_width=True)

    # -------------------------------------------
    # Visualisation avec un graphique crois√© (bar chart group√©)
    # -------------------------------------------
    with st.expander("üîÄ Graphique crois√© (moyenne cible)", expanded=False):
        st.info("Analyse crois√©e par deux variables cat√©gorielles.")
        # S√©lection de deux variables cat√©gorielles pour analyser la moyenne de la cible principale
        cat1 = st.selectbox("Cat√©gorie X", cat_cols, key="group1")
        cat2 = st.selectbox("Cat√©gorie couleur", cat_cols, key="group2")
        agg_df = df.groupby([cat1, cat2])[target_1].mean().reset_index()
        st.plotly_chart(px.bar(agg_df, x=cat1, y=target_1, color=cat2, barmode="group"), use_container_width=True)


# =============================================================================
# 4. EXPORT FINAL
# =============================================================================

# Cette section permet d'exporter les r√©sultats finaux (rapport, sauvegarde du DataFrame, CSV nettoy√©)
if df is not None:
    st.header("4. Export du fichier final")

    # -------------------------------------------
    # G√©n√©ration d'un rapport HTML avec profiling automatique
    # -------------------------------------------
    with st.expander("üìÑ Rapport HTML (profiling)", expanded=False):
        st.info("Profiling automatique du jeu de donn√©es.")
        if st.button("G√©n√©rer le rapport"):
            # Importation de ydata_profiling pour g√©n√©rer un rapport d√©taill√© du DataFrame
            from ydata_profiling import ProfileReport
            # Cr√©ation du r√©pertoire d'export si n√©cessaire
            os.makedirs("data/exports", exist_ok=True)
            # G√©n√©ration du rapport de profiling
            profile = ProfileReport(df, title="Rapport EDA", explorative=True)
            profile.to_file("data/exports/eda_report.html")
            # Propose un bouton de t√©l√©chargement pour le rapport HTML g√©n√©r√©
            with open("data/exports/eda_report.html", "rb") as f:
                st.download_button("T√©l√©charger le rapport", f, file_name="eda_report.html")

    # -------------------------------------------
    # Sauvegarde du DataFrame au format Parquet avec enregistrement dans le log
    # -------------------------------------------
    with st.expander("üíæ Sauvegarder avec log", expanded=False):
        st.info("Sauvegarde Parquet avec trace des actions.")
        if st.button("Sauvegarder maintenant"):
            os.makedirs("data/exports", exist_ok=True)
            path = "data/exports/final_dataframe.parquet"
            df.to_parquet(path)
            log_transformation(f"DataFrame sauvegard√© √† {path} avec {df.shape[0]} lignes et {df.shape[1]} colonnes.")
            st.success("Sauvegarde et log OK ‚úÖ")

    # -------------------------------------------
    # Export du DataFrame nettoy√© sous format CSV
    # -------------------------------------------
    if st.button("üì§ Exporter le CSV nettoy√©"):
        r = requests.get(f"{API_URL}/export/")
        if r.status_code == 200:
            st.download_button("T√©l√©charger le CSV", r.content, file_name="cleaned_data.csv")
        else:
            st.error("Erreur lors de l'export du CSV.")
