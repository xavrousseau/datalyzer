# =============================================================================
# DATALYZER — docker-compose.yml (simple, clair, commenté)
# Objectif : un seul service Streamlit, avec les dossiers utiles montés.
# Prérequis : un Dockerfile nommé "Dockerfile.streamlit" à la racine
#             qui lance : streamlit run /app/app.py --server.address=0.0.0.0
# =============================================================================

services:
  streamlit:
    # -- Construction de l'image à partir de ton Dockerfile dédié
    build:
      context: .                  # Contexte = racine du projet (où se trouvent app.py, requirements.txt, etc.)
      dockerfile: Dockerfile.streamlit

    container_name: datalyzer     # Nom lisible du conteneur (facilite les commandes docker compose logs/exec)

    # -- Publication du port Streamlit (interne 8501 → hôte 8501)
    ports:
      - "8501:8501"

    # -- Volumes : on partage seulement ce qui doit varier à chaud
    volumes:
      - ./data:/app/data          # Données (uploads, exports) : persiste hors conteneur
      - ./static:/app/static      # Images/ressources statiques
      - ./assets:/app/assets      # CSS/JS custom, thèmes, etc. (utiles à l’UI)

    # -- Variables d'env Streamlit (qualité de vie en local)
    environment:
      STREAMLIT_SERVER_ENABLE_CORS: "false"              # évite des erreurs CORS en local
      STREAMLIT_SERVER_ENABLE_XSRF_PROTECTION: "false"   # simplifie le dev local
      STREAMLIT_BROWSER_GATHER_USAGE_STATS: "false"      # pas de télémétrie Streamlit

    # -- Redémarre automatiquement si le process s'arrête (hors 'docker compose stop')
    restart: unless-stopped

# Réseau par défaut "bridge" : suffisant ici, pas besoin de config avancée
# (Laisser Docker créer le réseau par défaut est la solution la plus simple)
networks:
  default:
    driver: bridge
